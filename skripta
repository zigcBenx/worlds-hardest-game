
How to make game with python and pyhgame episode 4 - start and finish point, sound effects and another level

>> INTRO

Hello everyone welcome back to yet another episode of how to make game with python and pygame series.

In this video we will add start and finish point of the game, implement some sound effects and even start implementing another level.


If you skipped the first 3 episodes, where we implemented enemeis and player movement with collision detection, Make sure to check those out first.

If you like this series make sure to subscribe and press that bell icon, so you will be notified when the next episode arrives.
I'll be also happy if you smash that like button as well since it really helps out with my channel.

Another reminder that all the source code can be found down in the description, on my github account.

Now let's finish level 1 


>> END INTRO






*********************
The last thing that we need in our game are sound effects and start and finish points of the game....
the latter will be implemented by creating new class of field which will accept arguments for cordinates - which is where our field is gonna be located,
 width and height for the size of the field and color which will be set as green by default

Besides the constructor we need to define function for drawing the filed...
Since we want to display a rectangle we can copy draw function from player's class..

You can keep or remove the line for the border of the field, do what suits you best.
********-----*********


**********************
In game.py we have to import field ->  from field import Field
Then we just need to initialize object of class field and set it to the positions we want.
We will initialize two, since we want start and finish point.
Besides setting position for field, we will also change initial positions of player and enemies so everthing will be centerd.

You can change those values as you wish.

WE also have to change the boundries of enemies, since we changed its positions.

And as always we have to include field.draw function calls into our main draw function so it will be displayed in our game.

Now we can run our game and check out the result....
as you can see we have successfully drawn two green squares which represent start and finish.
******-------*******


**********************
For now we will jump to the sound effects and get back to the fields later on the video.


Since the game we are making is really simple, we need only two sound effects....
For background music and for the death of the player.

I put the wav files in the description, but you can create or find them yourself as well...

First we have to define where our file is located, so the game will know from where to play the sound effect.

// so for the fail sound effect type
fail_sound = pygame.mixer.Sound('crash.wav')

// end for the music
music = pygame.mixer.music.load('music.wav')




The background music can be played right after the initialization and loop throught the whole game...

To loop our backgriund music type: pygame.mixer.music.play(-1)


sound effect for the player hit must be played inside our condition in update function....


Lets run our game now... as you can see sound effects make game even more alive...

If you are getting errors with playing sound, check your file format, mp3s don't work all the time... try converting those to wav format.
**************--------------*****************


 
 
 
*********************************************
 
Next thing that we will add is image for the field, where player is allowed to move.... I already took screenshot from the original game... We will insert this image into our game....

If you want diffrent positioning of enemyies or level itself you will have to create that image yourself...
Anyway I will explain cleaner way of level implementing in one of next episodes..

// first we have to load image 
fieldImage = pygame.image.load('field.png')
// then set its scale
fieldImage = pygame.transform.scale(fieldImage, (550,290))
 
 and last but not leas blit it in draw function
 screen.blit(fieldImage, (100,150))
 ******************-----------------***********
 
 
 Now if we run our game, we can see the imported image....
 
 but the issue we are facing is that we can still go outside our newly defined field...
 
 We will fix that by changing player's move bondries
 
 
 In player.py file we have to change boundries of player's movement. 
 
 In move function where we have conditions for left,right,down and up arrow keys we also have window boundires which we set in second episode.
 
 We have to change those boundry values to mach our image field. If you improted different image you will have adjust your values at this point.
 
 
 Now let's test our game,......
 As you can see our player is limited to move only inside the field we specifed.....
 
 >> limiting player inside field

	-> player.py      self.x > 100 + self.wifth:
			   self.x < 630
			   self.y <  420
			   self.y > 150 + self.height
			   
			   def reset()
			   x = 150
			   y = 390



>> OUTRO
As you can see we are making some serious progress with our game, but it's not even close to finished - and it will probably never be, since projects can always be improved.

Make sure you don't miss the next episode, and if you have any recomendations what to include next, comment down bellow.

I hope you liked this episode and i will see you guys next time.
